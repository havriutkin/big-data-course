import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification, make_moons
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, ConfusionMatrixDisplay

def generate_data():
    data_linear, labels_linear = make_classification(
        n_samples=500, n_features=2, n_classes=2, n_redundant=0, n_clusters_per_class=1, random_state=42
    )
    data_moons, labels_moons = make_moons(n_samples=500, noise=0.1, random_state=42)
    return (data_linear, labels_linear), (data_moons, labels_moons)

def plot_decision_boundary(model, X, y, title):
    # Generated By AI
    plt.figure(figsize=(8, 6))
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.contourf(xx, yy, Z, alpha=0.8, cmap='coolwarm')
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap='coolwarm', edgecolors='k')
    plt.title(title)
    plt.show()

def train_and_evaluate_svm(X, y, kernel, C, gamma=None):
    if kernel == 'linear': 
        model = SVC(kernel=kernel, C=C, random_state=42)
    else: 
        model = SVC(kernel=kernel, C=C, gamma=gamma, random_state=42)
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    ConfusionMatrixDisplay.from_estimator(model, X_test, y_test, cmap="coolwarm")
    plt.show()
    return model, accuracy

if __name__ == "__main__":
    (data_linear, labels_linear), (data_moons, labels_moons) = generate_data()

    # Linear SVM on linearly separable data
    linear_model, linear_acc = train_and_evaluate_svm(data_linear, labels_linear, kernel='linear', C=1.0)
    print(f"Linear SVM Accuracy: {linear_acc}")
    plot_decision_boundary(linear_model, data_linear, labels_linear, "SVM with Linear Kernel")

    # RBF SVM on moon-shaped data
    rbf_model, rbf_acc = train_and_evaluate_svm(data_moons, labels_moons, kernel='rbf', C=1.0, gamma=0.5)
    print(f"RBF SVM Accuracy: {rbf_acc}")
    plot_decision_boundary(rbf_model, data_moons, labels_moons, "SVM with RBF Kernel")


    # Try different values of C and gamma and compare the results
    for C in [0.1, 1.0, 10]:
        for gamma in [0.1, 1, 10]:
            model, acc = train_and_evaluate_svm(data_moons, labels_moons, kernel='rbf', C=C, gamma=gamma)
            print(f"SVM with C={C}, gamma={gamma} => Accuracy: {acc}")
            plot_decision_boundary(model, data_moons, labels_moons, f"SVM (C={C}, gamma={gamma})")
