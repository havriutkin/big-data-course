import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import SpectralClustering, KMeans
from sklearn.datasets import make_moons, make_blobs

def generate_data():
    data_moons, labels_moons = make_moons(n_samples=500, noise=0.05, random_state=42)
    data_blobs, labels_blobs = make_blobs(n_samples=500, centers=3, cluster_std=1.0, random_state=42)
    return (data_moons, labels_moons), (data_blobs, labels_blobs)

def plot_clusters(data, labels, title):
    # Generated by AI
    plt.figure(figsize=(8, 6))
    plt.scatter(data[:, 0], data[:, 1], c=labels, cmap='viridis', s=50)
    plt.title(title)
    plt.show()

def perform_spectral_clustering(data, n_clusters, affinity, gamma=1.0):
    clustering = SpectralClustering(n_clusters=n_clusters, affinity=affinity, gamma=gamma, random_state=42)
    labels = clustering.fit_predict(data)
    return labels

def perform_kmeans_clustering(data, n_clusters):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    labels = kmeans.fit_predict(data)
    return labels

if __name__ == "__main__":
    (data_moons, labels_moons), (data_blobs, labels_blobs) = generate_data()

    # Spectral clustering on moon-shaped data
    spectral_labels_moons = perform_spectral_clustering(data_moons, n_clusters=2, affinity='rbf', gamma=10)
    plot_clusters(data_moons, spectral_labels_moons, "Spectral Clustering (Moons)")

    # Spectral clustering on blob data
    spectral_labels_blobs = perform_spectral_clustering(data_blobs, n_clusters=3, affinity='nearest_neighbors')
    plot_clusters(data_blobs, spectral_labels_blobs, "Spectral Clustering (Blobs)")

    # K-Means on moon-shaped data
    kmeans_labels_moons = perform_kmeans_clustering(data_moons, n_clusters=2)
    plot_clusters(data_moons, kmeans_labels_moons, "K-Means Clustering (Moons)")

    # K-Means on blob data
    kmeans_labels_blobs = perform_kmeans_clustering(data_blobs, n_clusters=3)
    plot_clusters(data_blobs, kmeans_labels_blobs, "K-Means Clustering (Blobs)")
